{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1_qeoZvPGanZOcGbq4WzlQUTrcCKXBasq","authorship_tag":"ABX9TyMUVUzRX78Oqty5VaPhomIR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"CcywLS0-G5ET","executionInfo":{"status":"ok","timestamp":1681801225791,"user_tz":-540,"elapsed":303,"user":{"displayName":"이주찬","userId":"14560333333906994042"}}},"outputs":[],"source":["def k(x, y):\n","  import random\n","  import pandas as pd \n","  import numpy as np\n","  from sklearn.model_selection import train_test_split\n","  from sklearn.preprocessing import StandardScaler\n","  from sklearn.neighbors import KNeighborsClassifier\n","  kn = KNeighborsClassifier(n_neighbors = 3)\n","  import matplotlib.pyplot as plt\n","  from sklearn.linear_model import LogisticRegression\n","  from scipy.special import expit \n","\n","  x = x.to_numpy()\n","  y = y.to_numpy()\n","  train_input, test_input, train_target, test_target= train_test_split( x, y, test_size =0.2 , random_state = 42)\n","  print('train_input.shape: ',train_input.shape,'/ train_target.shape: ',train_target.shape)\n","\n","  ss = StandardScaler()\n","  ss.fit(train_input)\n","  train_scaled = ss.transform(train_input)\n","  test_scaled = ss.transform(test_input)  \n","  print('train_scaled.shape: ',train_scaled.shape,'/ test_scaled.shape: ',test_scaled.shape)\n","\n","  kn.fit(train_scaled, train_target)\n","  print('kn.score(train_input, train_target) : ',kn.score(train_input, train_target))\n","  print('kn.score(test_input, test_target) :',kn.score(test_input, test_target))\n","  print('kn.score(test_scaled, test_target)',kn.score(test_scaled, test_target))\n","\n","  win_defeat_indexes = (train_target == 1) | (train_target == 0) #true or false로 해당 값 가져오기 \n","  print('win_defeat_indexes',win_defeat_indexes)\n","\n","  train_winrate = train_scaled[win_defeat_indexes]\n","  target_winrate = train_target[win_defeat_indexes]\n","  print('train_winrate :',train_winrate)\n","  print('target_winrate : ',target_winrate) \n","   \n","  lr = LogisticRegression()\n","  lr.fit(train_winrate, target_winrate)\n","\n","  lr.classes_\n","\n","  for i in range(0,100) :\n","    try:\n","      ran = random.randrange(0,500,10)\n","      lr = LogisticRegression(C=ran,max_iter=1000)\n","      lr.fit(train_scaled, train_target)\n","      print('C=',ran)\n","      print('lr.score(train_scaled, train_target):',lr.score(train_scaled, train_target),'lr.score(test_scaled, test_target) : ',lr.score(test_scaled, test_target))\n","    except:\n","      continue"]},{"cell_type":"code","source":[],"metadata":{"id":"G8VTFNBuKE30"},"execution_count":null,"outputs":[]}]}